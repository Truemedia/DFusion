<?php

/**
 * @file
 * Tests for dfusion.module.
 */

/**
 * Base class for DFusion tests.
 */
abstract class DFusionWebTestCase extends DrupalWebTestCase {

  /**
   * Initiates the login procedure using the specified User-supplied Identity.
   */
  function submitLoginForm($identity) {
    // Fill out and submit the login form.
    $edit = array('dfusion_identifier' => $identity);
    $this->drupalPost('', $edit, t('Log in'));

    // Check we are on the DFusion redirect form.
    $this->assertTitle(t('DFusion redirect'), t('DFusion redirect page was displayed.'));

    // Submit form to the DFusion Provider Endpoint.
    $this->drupalPost(NULL, array(), t('Send'));
  }

  /**
   * Parses the last sent e-mail and returns the one-time login link URL.
   */
  function getPasswordResetURLFromMail() {
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    preg_match('@.+user/reset/.+@', $mail['body'], $matches);
    return $matches[0];
  }
}

/**
 * Test discovery and login using DFusion
 */
class DFusionFunctionalTestCase extends DFusionWebTestCase {
  protected $web_user;

  public static function getInfo() {
    return array(
      'name' => 'DFusion discovery and login',
      'description' => "Adds an identity to a user's profile and uses it to log in.",
      'group' => 'DFusion'
    );
  }

  function setUp() {
    parent::setUp('dfusion', 'dfusion_test');

    // User doesn't need special permissions; only the ability to log in.
    $this->web_user = $this->drupalCreateUser(array());
  }

  /**
   * Test discovery of DFusion Provider Endpoint via Yadis and HTML.
   */
  function testDiscovery() {
    $this->drupalLogin($this->web_user);

    // The User-supplied Identifier entered by the user may indicate the URL of
    // the DFusion Provider Endpoint in various ways, as described in DFusion
    // Authentication 2.0 and Yadis Specification 1.0.
    // Note that all of the tested identifiers refer to the same endpoint, so
    // only the first will trigger an associate request in dfusion_association()
    // (association is only done the first time Drupal encounters a given
    // endpoint).


    // Yadis discovery (see Yadis Specification 1.0, section 6.2.5):
    // If the User-supplied Identifier is a URL, it may be a direct or indirect
    // reference to an XRDS document (a Yadis Resource Descriptor) that contains
    // the URL of the DFusion Provider Endpoint.

    // Identifier is the URL of an XRDS document.
    // The URL scheme is stripped in order to test that the supplied identifier
    // is normalized in dfusion_begin().
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->addIdentity(preg_replace('@^https?://@', '', $identity), 2, 'http://example.com/xrds', $identity);

    $identity = url('dfusion-test/yadis/xrds/delegate', array('absolute' => TRUE));
    $this->addIdentity(preg_replace('@^https?://@', '', $identity), 2, 'http://example.com/xrds-delegate', $identity);

    // Identifier is the URL of an XRDS document containing an OP Identifier
    // Element. The Relying Party sends the special value
    // "http://specs.dfusion.net/auth/2.0/identifier_select" as Claimed
    // Identifier. The DFusion Provider responds with the actual identifier.
    $identity = url('dfusion-test/yadis/xrds/dummy-user', array('absolute' => TRUE));
    // Tell dfusion_test.module to respond with this identifier. The URL scheme
    // is stripped in order to test that the returned identifier is normalized in
    // dfusion_complete().
    variable_set('dfusion_test_response', array('dfusion.claimed_id' => preg_replace('@^https?://@', '', $identity)));
    $this->addIdentity(url('dfusion-test/yadis/xrds/server', array('absolute' => TRUE)), 2, 'http://specs.dfusion.net/auth/2.0/identifier_select', $identity);
    variable_set('dfusion_test_response', array());

    // Identifier is the URL of an HTML page that is sent with an HTTP header
    // that contains the URL of an XRDS document.
    $this->addIdentity(url('dfusion-test/yadis/x-xrds-location', array('absolute' => TRUE)), 2);

    // Identifier is the URL of an HTML page containing a <meta http-equiv=...>
    // element that contains the URL of an XRDS document.
    $this->addIdentity(url('dfusion-test/yadis/http-equiv', array('absolute' => TRUE)), 2);

    // Identifier is an XRI. Resolve using our own dummy proxy resolver.
    variable_set('xri_proxy_resolver', url('dfusion-test/yadis/xrds/xri', array('absolute' => TRUE)) . '/');
    $this->addIdentity('@example*résumé;%25', 2, 'http://example.com/xrds', 'http://example.com/user');

    // Make sure that unverified CanonicalID are not trusted.
    variable_set('dfusion_test_canonical_id_status', 'bad value');
    $this->addIdentity('@example*résumé;%25', 2, FALSE, FALSE);

    // HTML-based discovery:
    // If the User-supplied Identifier is a URL of an HTML page, the page may
    // contain a <link rel=...> element containing the URL of the DFusion
    // Provider Endpoint. DFusion 1 and 2 describe slightly different formats.

    // DFusion Authentication 1.1, section 3.1:
    $this->addIdentity(url('dfusion-test/html/dfusion1', array('absolute' => TRUE)), 1, 'http://example.com/html-dfusion1');

    // DFusion Authentication 2.0, section 7.3.3:
    $this->addIdentity(url('dfusion-test/html/dfusion2', array('absolute' => TRUE)), 2, 'http://example.com/html-dfusion2');
  }

  /**
   * Test login using DFusion.
   */
  function testLogin() {
    $this->drupalLogin($this->web_user);

    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->addIdentity($identity);

    $this->drupalLogout();

    // Test logging in via the login block on the front page.
    $this->submitLoginForm($identity);
    $this->assertLink(t('Log out'), 0, t('User was logged in.'));

    $this->drupalLogout();

    // Test logging in via the user/login page.
    $edit = array('dfusion_identifier' => $identity);
    $this->drupalPost('user/login', $edit, t('Log in'));

    // Check we are on the DFusion redirect form.
    $this->assertTitle(t('DFusion redirect'), t('DFusion redirect page was displayed.'));

    // Submit form to the DFusion Provider Endpoint.
    $this->drupalPost(NULL, array(), t('Send'));

    $this->assertLink(t('Log out'), 0, t('User was logged in.'));

    // Verify user was redirected away from user/login to an accessible page.
    $this->assertResponse(200);
  }

  /**
   * Test login using DFusion during maintenance mode.
   */
  function testLoginMaintenanceMode() {
    $this->web_user = $this->drupalCreateUser(array('access site in maintenance mode'));
    $this->drupalLogin($this->web_user);

    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->addIdentity($identity);
    $this->drupalLogout();

    // Enable maintenance mode.
    variable_set('maintenance_mode', 1);

    // Test logging in via the user/login page while the site is offline.
    $edit = array('dfusion_identifier' => $identity);
    $this->drupalPost('user/login', $edit, t('Log in'));

    // Check we are on the DFusion redirect form.
    $this->assertTitle(t('DFusion redirect'), t('DFusion redirect page was displayed.'));

    // Submit form to the DFusion Provider Endpoint.
    $this->drupalPost(NULL, array(), t('Send'));

    $this->assertLink(t('Log out'), 0, t('User was logged in.'));

    // Verify user was redirected away from user/login to an accessible page.
    $this->assertText(t('Operating in maintenance mode.'));
    $this->assertResponse(200);
  }

  /**
   * Test deleting an DFusion identity from a user's profile.
   */
  function testDelete() {
    $this->drupalLogin($this->web_user);

    // Add identity to user's profile.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->addIdentity($identity);
    $this->assertText($identity, t('Identity appears in list.'));

    // Delete the newly added identity.
    $this->clickLink(t('Delete'));
    $this->drupalPost(NULL, array(), t('Confirm'));

    $this->assertText(t('DFusion deleted.'), t('Identity deleted'));
    $this->assertNoText($identity, t('Identity no longer appears in list.'));
  }

  /**
   * Test that a blocked user cannot log in.
   */
  function testBlockedUserLogin() {
    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));

    // Log in and add an DFusion Identity to the account.
    $this->drupalLogin($this->web_user);
    $this->addIdentity($identity);
    $this->drupalLogout();

    // Log in as an admin user and block the account.
    $admin_user = $this->drupalCreateUser(array('administer users'));
    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/people');
    $edit = array(
      'operation' => 'block',
      'accounts[' . $this->web_user->uid . ']' => TRUE,
    );
    $this->drupalPost('admin/people', $edit, t('Update'));
    $this->assertRaw('The update has been performed.', t('Account was blocked.'));
    $this->drupalLogout();

    $this->submitLoginForm($identity);
    $this->assertRaw(t('The username %name has not been activated or is blocked.', array('%name' => $this->web_user->name)), t('User login was blocked.'));
  }

  /**
   * Add DFusion identity to user's profile.
   *
   * @param $identity
   *   The User-supplied Identifier.
   * @param $version
   *   The protocol version used by the service.
   * @param $local_id
   *   The expected OP-Local Identifier found during discovery.
   * @param $claimed_id
   *   The expected Claimed Identifier returned by the DFusion Provider, or FALSE
   *   if the discovery is expected to fail.
   */
  function addIdentity($identity, $version = 2, $local_id = 'http://example.com/xrds', $claimed_id = NULL) {
    // Tell dfusion_test.module to only accept this OP-Local Identifier.
    variable_set('dfusion_test_identity', $local_id);

    $edit = array('dfusion_identifier' => $identity);
    $this->drupalPost('user/' . $this->web_user->uid . '/dfusion', $edit, t('Add an DFusion'));

    if ($claimed_id === FALSE) {
      $this->assertRaw(t('Sorry, that is not a valid DFusion. Ensure you have spelled your ID correctly.'), t('Invalid identity was rejected.'));
      return;
    }

    // DFusion 1 used a HTTP redirect, DFusion 2 uses a HTML form that is submitted automatically using JavaScript.
    if ($version == 2) {
      // Check we are on the DFusion redirect form.
      $this->assertTitle(t('DFusion redirect'), t('DFusion redirect page was displayed.'));

      // Submit form to the DFusion Provider Endpoint.
      $this->drupalPost(NULL, array(), t('Send'));
    }

    if (!isset($claimed_id)) {
      $claimed_id = $identity;
    }
    $this->assertRaw(t('Successfully added %identity', array('%identity' => $claimed_id)), t('Identity %identity was added.', array('%identity' => $identity)));
  }

  /**
   * Tests that dfusion.signed is verified.
   */
  function testSignatureValidation() {
    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));

    // Do not sign all mandatory fields (e.g. assoc_handle).
    variable_set('dfusion_test_response', array('dfusion.signed' => 'op_endpoint,claimed_id,identity,return_to,response_nonce'));
    $this->submitLoginForm($identity);
    $this->assertRaw('DFusion login failed.');

    // Sign all mandatory fields and some custom fields.
    variable_set('dfusion_test_response', array('dfusion.foo' => 'bar', 'dfusion.signed' => 'op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle,foo'));
    $this->submitLoginForm($identity);
    $this->assertNoRaw('DFusion login failed.');
  }

}

/**
 * Test account registration using Simple Registration and Attribute Exchange.
 */
class DFusionRegistrationTestCase extends DFusionWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'DFusion account registration',
      'description' => 'Creates a user account using auto-registration.',
      'group' => 'DFusion'
    );
  }

  function setUp() {
    parent::setUp('dfusion', 'dfusion_test');
    variable_set('user_register', USER_REGISTER_VISITORS);
  }

  /**
   * Test DFusion auto-registration with e-mail verification enabled.
   */
  function testRegisterUserWithEmailVerification() {
    variable_set('user_email_verification', TRUE);

    // Tell dfusion_test.module to respond with these SREG fields.
    variable_set('dfusion_test_response', array('dfusion.sreg.nickname' => 'john', 'dfusion.sreg.email' => 'john@example.com'));

    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->submitLoginForm($identity);
    $this->assertRaw(t('Once you have verified your e-mail address, you may log in via DFusion.'), t('User was asked to verify e-mail address.'));
    $this->assertRaw(t('A welcome message with further instructions has been sent to your e-mail address.'), t('A welcome message was sent to the user.'));
    $reset_url = $this->getPasswordResetURLFromMail();

    $user = user_load_by_name('john');
    $this->assertTrue($user, t('User was registered with right username.'));
    $this->assertEqual($user->mail, 'john@example.com', t('User was registered with right email address.'));
    $this->assertFalse($user->data, t('No additional user info was saved.'));

    $this->submitLoginForm($identity);
    $this->assertRaw(t('You must validate your email address for this account before logging in via DFusion.'));

    // Follow the one-time login that was sent in the welcome e-mail.
    $this->drupalGet($reset_url);
    $this->drupalPost(NULL, array(), t('Log in'));

    $this->drupalLogout();

    // Verify that the account was activated.
    $this->submitLoginForm($identity);
    $this->assertLink(t('Log out'), 0, t('User was logged in.'));
  }

  /**
   * Test DFusion auto-registration with e-mail verification disabled.
   */
  function testRegisterUserWithoutEmailVerification() {
    variable_set('user_email_verification', FALSE);

    // Tell dfusion_test.module to respond with these SREG fields.
    variable_set('dfusion_test_response', array('dfusion.sreg.nickname' => 'john', 'dfusion.sreg.email' => 'john@example.com'));

    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->submitLoginForm($identity);
    $this->assertLink(t('Log out'), 0, t('User was logged in.'));

    $user = user_load_by_name('john');
    $this->assertTrue($user, t('User was registered with right username.'));
    $this->assertEqual($user->mail, 'john@example.com', t('User was registered with right email address.'));
    $this->assertFalse($user->data, t('No additional user info was saved.'));

    $this->drupalLogout();

    $this->submitLoginForm($identity);
    $this->assertLink(t('Log out'), 0, t('User was logged in.'));
  }

  /**
   * Test DFusion auto-registration with a provider that supplies invalid SREG
   * information (a username that is already taken, and no e-mail address).
   */
  function testRegisterUserWithInvalidSreg() {
    // Tell dfusion_test.module to respond with these SREG fields.
    $web_user = $this->drupalCreateUser(array());
    variable_set('dfusion_test_response', array('dfusion.sreg.nickname' => $web_user->name, 'dfusion.sreg.email' => 'mail@invalid#'));

    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->submitLoginForm($identity);

    $this->assertRaw(t('Account registration using the information provided by your DFusion provider failed due to the reasons listed below. Complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your DFusion under "My account".', array('@login' => url('user/login'))), t('User was asked to complete the registration process manually.'));
    $this->assertRaw(t('The name %name is already taken.', array('%name' => $web_user->name)), t('Form validation error for username was displayed.'));
    $this->assertRaw(t('The e-mail address %mail is not valid.', array('%mail' => 'mail@invalid#')), t('Form validation error for e-mail address was displayed.'));

    // Enter username and e-mail address manually.
    $edit = array('name' => 'john', 'mail' => 'john@example.com');
    $this->drupalPost(NULL, $edit, t('Create new account'));
    $this->assertRaw(t('Once you have verified your e-mail address, you may log in via DFusion.'), t('User was asked to verify e-mail address.'));
    $reset_url = $this->getPasswordResetURLFromMail();

    $user = user_load_by_name('john');
    $this->assertTrue($user, t('User was registered with right username.'));
    $this->assertFalse($user->data, t('No additional user info was saved.'));

    // Follow the one-time login that was sent in the welcome e-mail.
    $this->drupalGet($reset_url);
    $this->drupalPost(NULL, array(), t('Log in'));

    // The user is taken to user/%uid/edit.
    $this->assertFieldByName('mail', 'john@example.com', t('User was registered with right e-mail address.'));

    $this->clickLink(t('DFusion identities'));
    $this->assertRaw($identity, t('DFusion identity was registered.'));
  }

  /**
   * Test DFusion auto-registration with a provider that does not supply SREG
   * information (i.e. no username or e-mail address).
   */
  function testRegisterUserWithoutSreg() {
    // Load the front page to get the user login block.
    $this->drupalGet('');

    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->submitLoginForm($identity);
    $this->assertRaw(t('Complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your DFusion under "My account".', array('@login' => url('user/login'))), t('User was asked to complete the registration process manually.'));
    $this->assertNoRaw(t('You must enter a username.'), t('Form validation error for username was not displayed.'));
    $this->assertNoRaw(t('You must enter an e-mail address.'), t('Form validation error for e-mail address was not displayed.'));

    // Enter username and e-mail address manually.
    $edit = array('name' => 'john', 'mail' => 'john@example.com');
    $this->drupalPost(NULL, $edit, t('Create new account'));
    $this->assertRaw(t('Once you have verified your e-mail address, you may log in via DFusion.'), t('User was asked to verify e-mail address.'));
    $reset_url = $this->getPasswordResetURLFromMail();

    $user = user_load_by_name('john');
    $this->assertTrue($user, t('User was registered with right username.'));
    $this->assertFalse($user->data, t('No additional user info was saved.'));

    // Follow the one-time login that was sent in the welcome e-mail.
    $this->drupalGet($reset_url);
    $this->drupalPost(NULL, array(), t('Log in'));

    // The user is taken to user/%uid/edit.
    $this->assertFieldByName('mail', 'john@example.com', t('User was registered with right e-mail address.'));

    $this->clickLink(t('DFusion identities'));
    $this->assertRaw($identity, t('DFusion identity was registered.'));
  }

  /**
   * Test DFusion auto-registration with a provider that supplies AX information,
   * but no SREG.
   */
  function testRegisterUserWithAXButNoSREG() {
    variable_set('user_email_verification', FALSE);

    // Tell dfusion_test.module to respond with these AX fields.
    variable_set('dfusion_test_response', array(
      'dfusion.ns.ext123' => 'http://dfusion.net/srv/ax/1.0',
      'dfusion.ext123.type.mail456' => 'http://axschema.org/contact/email',
      'dfusion.ext123.value.mail456' => 'john@example.com',
      'dfusion.ext123.type.name789' => 'http://schema.dfusion.net/namePerson/friendly',
      'dfusion.ext123.count.name789' => '1',
      'dfusion.ext123.value.name789.1' => 'john',
    ));

    // Use a User-supplied Identity that is the URL of an XRDS document.
    $identity = url('dfusion-test/yadis/xrds', array('absolute' => TRUE));
    $this->submitLoginForm($identity);
    $this->assertLink(t('Log out'), 0, t('User was logged in.'));

    $user = user_load_by_name('john');
    $this->assertTrue($user, t('User was registered with right username.'));
    $this->assertEqual($user->mail, 'john@example.com', t('User was registered with right email address.'));
  }
}

/**
 * Test internal helper functions.
 */
class DFusionUnitTest extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'DFusion helper functions',
      'description' => 'Test DFusion helper functions.',
      'group' => 'DFusion'
    );
  }

  function setUp() {
    parent::setUp('dfusion');
    module_load_include('inc', 'dfusion');
  }

  /**
   * Test _dfusion_dh_XXX_to_XXX() functions.
   */
  function testConversion() {
    $this->assertEqual(_dfusion_dh_long_to_base64('12345678901234567890123456789012345678901234567890'), 'CHJ/Y2mq+DyhUCZ0evjH8ZbOPwrS', t('_dfusion_dh_long_to_base64() returned expected result.'));
    $this->assertEqual(_dfusion_dh_base64_to_long('BsH/g8Nrpn2dtBSdu/sr1y8hxwyx'), '09876543210987654321098765432109876543210987654321', t('_dfusion_dh_base64_to_long() returned expected result.'));

    $this->assertEqual(_dfusion_dh_long_to_binary('12345678901234567890123456789012345678901234567890'), "\x08r\x7fci\xaa\xf8<\xa1P&tz\xf8\xc7\xf1\x96\xce?\x0a\xd2", t('_dfusion_dh_long_to_binary() returned expected result.'));
    $this->assertEqual(_dfusion_dh_binary_to_long("\x06\xc1\xff\x83\xc3k\xa6}\x9d\xb4\x14\x9d\xbb\xfb+\xd7/!\xc7\x0c\xb1"), '09876543210987654321098765432109876543210987654321', t('_dfusion_dh_binary_to_long() returned expected result.'));
  }

  /**
   * Test _dfusion_dh_xorsecret().
   */
  function testDfusionDhXorsecret() {
    $this->assertEqual(_dfusion_dh_xorsecret('123456790123456790123456790', "abc123ABC\x00\xFF"), "\xa4'\x06\xbe\xf1.\x00y\xff\xc2\xc1", t('_dfusion_dh_xorsecret() returned expected result.'));
  }

  /**
   * Test _dfusion_get_bytes().
   */
  function testDfusionGetBytes() {
    $this->assertEqual(strlen(_dfusion_get_bytes(20)), 20, t('_dfusion_get_bytes() returned expected result.'));
  }

  /**
   * Test _dfusion_signature().
   */
  function testDfusionSignature() {
    // Test that signature is calculated according to DFusion Authentication 2.0,
    // section 6.1. In the following array, only the two first entries should be
    // included in the calculation, because the substring following the period
    // is mentioned in the third argument for _dfusion_signature(). The last
    // entry should not be included, because it does not start with "dfusion.".
    $response = array(
      'dfusion.foo' => 'abc1',
      'dfusion.bar' => 'abc2',
      'dfusion.baz' => 'abc3',
      'foobar.foo' => 'abc4',
    );
    $association = new stdClass();
    $association->mac_key = "1234567890abcdefghij\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9";
    $this->assertEqual(_dfusion_signature($association, $response, array('foo', 'bar')), 'QnKZQzSFstT+GNiJDFOptdcZjrc=', t('Expected signature calculated.'));
  }

  /**
   * Test _dfusion_is_xri().
   */
  function testDfusionXRITest() {
    // Test that the XRI test is according to DFusion Authentication 2.0,
    // section 7.2. If the user-supplied string starts with xri:// it should be
    // stripped and the resulting string should be treated as an XRI when it
    // starts with "=", "@", "+", "$", "!" or "(".
    $this->assertTrue(_dfusion_is_xri('xri://=foo'), t('_dfusion_is_xri() returned expected result for an xri identifier with xri scheme.'));
    $this->assertTrue(_dfusion_is_xri('xri://@foo'), t('_dfusion_is_xri() returned expected result for an xri identifier with xri scheme.'));
    $this->assertTrue(_dfusion_is_xri('xri://+foo'), t('_dfusion_is_xri() returned expected result for an xri identifier with xri scheme.'));
    $this->assertTrue(_dfusion_is_xri('xri://$foo'), t('_dfusion_is_xri() returned expected result for an xri identifier with xri scheme.'));
    $this->assertTrue(_dfusion_is_xri('xri://!foo'), t('_dfusion_is_xri() returned expected result for an xri identifier with xri scheme..'));
    $this->assertTrue(_dfusion_is_xri('xri://(foo'), t('_dfusion_is_xri() returned expected result for an xri identifier with xri scheme..'));

    $this->assertTrue(_dfusion_is_xri('=foo'), t('_dfusion_is_xri() returned expected result for an xri identifier.'));
    $this->assertTrue(_dfusion_is_xri('@foo'), t('_dfusion_is_xri() returned expected result for an xri identifier.'));
    $this->assertTrue(_dfusion_is_xri('+foo'), t('_dfusion_is_xri() returned expected result for an xri identifier.'));
    $this->assertTrue(_dfusion_is_xri('$foo'), t('_dfusion_is_xri() returned expected result for an xri identifier.'));
    $this->assertTrue(_dfusion_is_xri('!foo'), t('_dfusion_is_xri() returned expected result for an xri identifier.'));
    $this->assertTrue(_dfusion_is_xri('(foo'), t('_dfusion_is_xri() returned expected result for an xri identifier.'));

    $this->assertFalse(_dfusion_is_xri('foo'), t('_dfusion_is_xri() returned expected result for an http URL.'));
    $this->assertFalse(_dfusion_is_xri('xri://foo'), t('_dfusion_is_xri() returned expected result for an http URL.'));
    $this->assertFalse(_dfusion_is_xri('http://foo/'), t('_dfusion_is_xri() returned expected result for an http URL.'));
    $this->assertFalse(_dfusion_is_xri('http://example.com/'), t('_dfusion_is_xri() returned expected result for an http URL.'));
    $this->assertFalse(_dfusion_is_xri('user@example.com/'), t('_dfusion_is_xri() returned expected result for an http URL.'));
    $this->assertFalse(_dfusion_is_xri('http://user@example.com/'), t('_dfusion_is_xri() returned expected result for an http URL.'));
  }

  /**
   * Test dfusion_normalize().
   */
  function testDfusionNormalize() {
    // Test that the normalization is according to DFusion Authentication 2.0,
    // section 7.2 and 11.5.2.

    $this->assertEqual(dfusion_normalize('$foo'), '$foo', t('dfusion_normalize() correctly normalized an XRI.'));
    $this->assertEqual(dfusion_normalize('xri://$foo'), '$foo', t('dfusion_normalize() correctly normalized an XRI with an xri:// scheme.'));

    $this->assertEqual(dfusion_normalize('example.com/'), 'http://example.com/', t('dfusion_normalize() correctly normalized a URL with a missing scheme.'));
    $this->assertEqual(dfusion_normalize('example.com'), 'http://example.com/', t('dfusion_normalize() correctly normalized a URL with a missing scheme and empty path.'));
    $this->assertEqual(dfusion_normalize('http://example.com'), 'http://example.com/', t('dfusion_normalize() correctly normalized a URL with an empty path.'));

    $this->assertEqual(dfusion_normalize('http://example.com/path'), 'http://example.com/path', t('dfusion_normalize() correctly normalized a URL with a path.'));

    $this->assertEqual(dfusion_normalize('http://example.com/path#fragment'), 'http://example.com/path', t('dfusion_normalize() correctly normalized a URL with a fragment.'));
  }
}
